#!/bin/sh

#This script is meant to be called from the conf makefile
#with two arguments:
#1) path to the current kernel configuration kernel_config.h and
#2) another path to the kernel configuration file with all options set
#to 1 or their default value - kernel_yes_config.h.
#These files would be generated by the Kconfig conf tool at:
#$(out)/gen/include/osv/kernel_config.h and
#$(out)/gen/include/osv/kernel_yes_config.h.
#
#The script then generates a header file for each configuration option
#conf_{xyz} - $(out)/gen/include/osv/kernel_config_{xyz}.h. The generated
#header file defines corresponding macro CONF_{xyz} with the value of the option.
#Such header files defining single configuration option will allow for granular
#control of files needed to be recompiled on specific configuration changes.
#
#For every "yes/no" option xyz from kernel_yes_config.h NOT found in kernel_config.h,
#the corresponding header file will define macro CONF_{xyz} with value 0 because such
#option is considered as not set.
#
if [ "$#" -ne 2 ]; then
  echo "usage: $(basename $0) conf_file yes_conf_file" >&2
  exit 1
fi

conf_file=$1
yes_conf_file=$2

conf_directory=$(dirname $conf_file)
#
#Write a '#define CONF_...' line to a corresponding kernel_config_....h header file
#ONLY if new configuration line is different from what is now
write_or_update_conf_file() {
  conf_line="$1"
  conf_variable=$(echo $conf_line | grep -o 'CONF\S\+')
  conf_file_name=$(echo $conf_line | grep -o 'CONF\S\+' | sed 's/CONF/kernel_config/')
  tmp=$(mktemp)

  cat >$tmp <<EOL
/* This file is generated automatically. */
#ifndef OSV_${conf_file_name}_H
#define OSV_${conf_file_name}_H

#ifndef $conf_variable
$conf_line
#endif

#endif
EOL

  full_file_name="$conf_directory/$conf_file_name.h"
  if cmp -s $tmp $full_file_name
  then
      rm $tmp
  else
      mv $tmp $full_file_name
  fi
}

sorted_conf_file=$(mktemp)
sorted_yes_conf_file=$(mktemp)

sort $conf_file > $sorted_conf_file
sort $yes_conf_file > $sorted_yes_conf_file

the_conf_file=$(mktemp)
#Write the '#define CONF...' lines from the current config to the temp file
grep "^#define CONF" $conf_file > $the_conf_file
#Append the '#define CONF...' lines from the 'yes' config file NOT in the main one and replace '1' with '0'
comm -13 $sorted_conf_file $sorted_yes_conf_file | grep "^#define CONF.* 1$" | sed 's/1$/0/' >> $the_conf_file
#For each '#define CONF...' call write_or_update_conf_file() function to create or update individual header file
while read line
  do write_or_update_conf_file "$line"
done < $the_conf_file

rm -f $sorted_conf_file $sorted_yes_conf_file $the_conf_file
